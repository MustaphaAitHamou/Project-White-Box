name: CI-CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: "20"
  BUILD_DIR: "dist"
  LC_ALL: "C.UTF-8"

# ─────────────────────────────────────────────────────────────
# 1️⃣  Build + static checks
# ─────────────────────────────────────────────────────────────
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Lint & type-check
        run: npm run lint --if-present

      - name: Build (Vite)
        run: npm run build        # produit ./dist

      - name: Upload build artefact
        uses: actions/upload-artifact@v4
        with:
          name: site-build
          path: ${{ env.BUILD_DIR }}

# ─────────────────────────────────────────────────────────────
# 2️⃣  Tests unitaires + couverture (Jest)
# ─────────────────────────────────────────────────────────────
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Run Jest + coverage
        run: npm test -- --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          # Jest produit coverage/coverage-final.json
          files: ./coverage/coverage-final.json
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          fail_ci_if_error: true

# ─────────────────────────────────────────────────────────────
# 3️⃣  Packaging Docker (optionnel)
# ─────────────────────────────────────────────────────────────
  package:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build image
        run: |
          docker build -t tripgenius:${{ github.sha }} .
          docker image save tripgenius:${{ github.sha }} | gzip > image.tar.gz
      - uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar.gz

# ─────────────────────────────────────────────────────────────
# 4️⃣  Déploiement Vercel (preview)
# ─────────────────────────────────────────────────────────────
  deploy-preprod:
    needs: package
    runs-on: ubuntu-latest
    environment: preview
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Vercel (Preview)
        run: |
          npm i -g vercel
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod=false --confirm --yes
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

# ─────────────────────────────────────────────────────────────
# 5️⃣  Audit Lighthouse CI (sans vite preview)
# ─────────────────────────────────────────────────────────────
  lighthouse:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Récupère le build statique
      - name: Download build artefact
        uses: actions/download-artifact@v4
        with:
          name: site-build
          path: ${{ env.BUILD_DIR }}

      # Pas besoin de node_modules/vite : LHCI sert ./dist lui-même
      - name: Run Lighthouse CI
        run: npx -y @lhci/cli@latest autorun --config=.lighthouserc.json --verbose
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload LHCI report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: .lighthouseci/**
