name: CI‑CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy-prod:
        description: "Déployer en production ? (yes/no)"
        required: false
        default: "no"

env:
  NODE_VERSION: "20"
  BUILD_DIR: "dist"
  REMOTE_DIR: "/var/www/tripgenius"
  LC_ALL: "C.UTF-8"

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
# ─────────────────────────────────────────────
# 1️⃣  Lint + Build
# ─────────────────────────────────────────────
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Build (Vite)
        run: npm run build

      - name: Upload build artefact
        uses: actions/upload-artifact@v4
        with:
          name: site-build
          path: ${{ env.BUILD_DIR }}

# ─────────────────────────────────────────────
# 2️⃣  Tests + Couverture (Jest) + Codecov
# ─────────────────────────────────────────────
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - run: npm ci

      - name: Run tests with coverage
        run: npm test -- --coverage --coverageReporters=lcov

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}   # à définir dans les secrets
          files: ./coverage/lcov.info
          flags: unittests
          disable_search: true
          fail_ci_if_error: true
          verbose: true

# ─────────────────────────────────────────────
# 3️⃣  Lighthouse CI (perf / a11y)
# ─────────────────────────────────────────────
  lighthouse:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: site-build
          path: ${{ env.BUILD_DIR }}

      - name: Install LHCI
        run: npm install -g @lhci/cli@0.13

      - name: Collect & upload reports
        run: |
          lhci collect --static-dist-dir=${{ env.BUILD_DIR }}
          lhci upload --target=temporary-public-storage --token="${{ secrets.LHCI_TOKEN || 'unused' }}"

      - name: Enforce budgets
        run: lhci assert --assertions.preset lighthouse:no-pwa --assertions.assertionFailureLevels=error

# ─────────────────────────────────────────────
# 4️⃣  Docker package (optionnel)
# ─────────────────────────────────────────────
  package:
    needs: lighthouse
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build docker image
        run: |
          docker build -t tripgenius:${{ github.sha }} .
          docker image save tripgenius:${{ github.sha }} | gzip > image.tar.gz
      - uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar.gz

# ─────────────────────────────────────────────
# 5️⃣  Déploiement prod (manuel)
# ─────────────────────────────────────────────
  deploy-prod:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy-prod == 'yes'
    needs: package
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: site-build
          path: ${{ env.BUILD_DIR }}

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.IGLAO_SSH_KEY }}

      - name: Add Iglao host to known_hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.IGLAO_KNOWN_HOST }}" >> ~/.ssh/known_hosts

      - name: Rsync to server
        run: |
          rsync -avz --delete ${{ env.BUILD_DIR }}/ \
            ${{ secrets.IGLAO_USER }}@${{ secrets.IGLAO_HOST }}:${{ env.REMOTE_DIR }}

      - name: Smoke‑test production URL
        run: curl -f https://tripgenius.eu
