name: CI-CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: "20"
  BUILD_DIR: "dist"
  LC_ALL: "C.UTF-8"

jobs:
  # ─────────────────────────────────────────────────────────────
  # 1) Build + lint
  # ─────────────────────────────────────────────────────────────
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install deps
        run: npm ci

      # Clés factices pour que le bundle/LHCI ne crash pas
      - name: Create .env.local for build
        run: |
          cat > .env.local << 'EOF'
          VITE_GOOGLE_PLACE_API_KEY=fake-place-key
          VITE_GOOGLE_GEMINI_AI_API_KEY=fake-gemini-key
          VITE_GOOGLE_AUTH_CLIENT_ID=fake-client.apps.googleusercontent.com
          VITE_RECAPTCHA_SITE_KEY=fake-recaptcha
          EOF

      - name: Lint & type-check
        run: npm run lint

      - name: Build (Vite)
        run: npm run build

      - name: Upload build artefact
        uses: actions/upload-artifact@v4
        with:
          name: site-build
          path: ${{ env.BUILD_DIR }}

  # ─────────────────────────────────────────────────────────────
  # 2) Tests + couverture Codecov
  # ─────────────────────────────────────────────────────────────
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm ci

      - name: Run tests
        run: npm run test -- --coverage
        env:
          NODE_OPTIONS: "--experimental-vm-modules"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          flags: unittests
          fail_ci_if_error: true

  # ─────────────────────────────────────────────────────────────
  # 3) Packaging Docker (optionnel)
  # ─────────────────────────────────────────────────────────────
  package:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build image
        run: |
          docker build -t tripgenius:${{ github.sha }} .
          docker image save tripgenius:${{ github.sha }} | gzip > image.tar.gz
      - uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar.gz

  # ─────────────────────────────────────────────────────────────
  # 4) Déploiement Vercel (preview)
  # ─────────────────────────────────────────────────────────────
  deploy-preprod:
    needs: package
    runs-on: ubuntu-latest
    environment: preview
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Vercel (Preview)
        run: |
          npm install -g vercel
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod=false --confirm --yes
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  # ─────────────────────────────────────────────────────────────
  # 5) Lighthouse CI sur le build statique
  # ─────────────────────────────────────────────────────────────
  lighthouse:
  needs: test
  runs-on: ubuntu-latest
  steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    # Récupère le build statique
    - name: Download build artefact
      uses: actions/download-artifact@v4
      with:
        name: site-build
        path: ${{ env.BUILD_DIR }}

    # 1) Collect
    - name: LHCI collect
      run: npx -y @lhci/cli@latest collect --config=.lighthouserc.json --verbose

    # 2) Assert (fait échouer si seuils non atteints)
    - name: LHCI assert
      run: npx -y @lhci/cli@latest assert --config=.lighthouserc.json

    # 3) Upload => fichiers locaux dans .lighthouseci/
    - name: LHCI upload (filesystem)
      run: npx -y @lhci/cli@latest upload --config=.lighthouserc.json --target=filesystem --outputDir=.lighthouseci

    # Debug utile : montre ce qui a été produit
    - name: List LHCI outputs
      run: |
        ls -la .lighthouseci || true
        find .lighthouseci -maxdepth 2 -type f -print || true

    # Publication des rapports dans les artefacts GitHub
    - name: Upload LHCI report
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-report
        path: .lighthouseci/**
        if-no-files-found: error
        retention-days: 7
