name: CI-CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: "20"
  BUILD_DIR: "dist"
  LC_ALL: "C.UTF-8"

jobs:
  # ─────────────────────────────────────────────────────────────
  # 1) Build + lint
  # ─────────────────────────────────────────────────────────────
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install deps
        run: npm ci

      # Clés factices pour que le bundle/LHCI ne crash pas
      - name: Create .env.local for build
        run: |
          cat > .env.local << 'EOF'
          VITE_GOOGLE_PLACE_API_KEY=fake-place-key
          VITE_GOOGLE_GEMINI_AI_API_KEY=fake-gemini-key
          VITE_GOOGLE_AUTH_CLIENT_ID=fake-client.apps.googleusercontent.com
          VITE_RECAPTCHA_SITE_KEY=fake-recaptcha
          EOF

      - name: Lint & type-check
        run: npm run lint

      - name: Build (Vite)
        run: npm run build

      - name: Upload build artefact
        uses: actions/upload-artifact@v4
        with:
          name: site-build
          path: ${{ env.BUILD_DIR }}

  # ─────────────────────────────────────────────────────────────
  # 2) Tests + couverture (artefact + Codecov)
  # ─────────────────────────────────────────────────────────────
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # ✅ évite l'erreur Codecov "properly create commit"

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - run: npm ci

      - name: Run tests (Jest + coverage)
        run: npm run test -- --coverage
        env:
          NODE_OPTIONS: "--experimental-vm-modules"

      # ✅ Garde une preuve téléchargeable pour le dossier
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/

      # ✅ Envoi (facultatif si dépôt public, sinon TOKEN requis)
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage/coverage-final.json
          token: ${{ secrets.CODECOV_TOKEN }} # inutile si repo public
          flags: unittests
          fail_ci_if_error: true

  # ─────────────────────────────────────────────────────────────
  # 3) Packaging Docker (optionnel)
  # ─────────────────────────────────────────────────────────────
  package:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build image
        run: |
          docker build -t tripgenius:${{ github.sha }} .
          docker image save tripgenius:${{ github.sha }} | gzip > image.tar.gz

      - uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar.gz

  # ─────────────────────────────────────────────────────────────
  # 4) Déploiement Vercel (Preview)
  # ─────────────────────────────────────────────────────────────
  deploy-preprod:
    needs: package
    runs-on: ubuntu-latest
    environment: preview
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Vercel (Preview)
        run: |
          npm i -g vercel
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod=false --confirm --yes
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  # ─────────────────────────────────────────────────────────────
  # 5) Lighthouse CI sur le build statique
  # ─────────────────────────────────────────────────────────────
  lighthouse:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download build artefact
        uses: actions/download-artifact@v4
        with:
          name: site-build
          path: ${{ env.BUILD_DIR }}

      - name: Run Lighthouse CI
        run: npx -y @lhci/cli@latest autorun --config=.lighthouserc.json --verbose
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload LHCI report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: .lighthouseci
          if-no-files-found: warn
          retention-days: 7
