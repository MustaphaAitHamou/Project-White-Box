name: CI‑CD Pipeline

on:
  push:
    branches: [ main, preprod ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: "20"
  BUILD_DIR: "dist"
  LC_ALL: "C.UTF-8"

jobs:
# ─────────────────────────────────────────────────────────────
# 1️⃣  Build + static checks (ESLint, TypeScript)
# ─────────────────────────────────────────────────────────────
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Lint & type‑check
        run: npm run lint

      - name: Build (Vite)
        run: npm run build

      - name: Upload build artefact
        uses: actions/upload-artifact@v4
        with:
          name: site-build
          path: ${{ env.BUILD_DIR }}

# ─────────────────────────────────────────────────────────────
# 2️⃣  Tests unitaires + couverture (Vitest + Codecov)
# ─────────────────────────────────────────────────────────────
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm ci

      - name: Run Vitest
        run: npm run test -- --coverage
        env:
          NODE_OPTIONS: "--experimental-vm-modules"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/vitest-final.json
          flags: unittests
          fail_ci_if_error: true

# ─────────────────────────────────────────────────────────────
# 3️⃣  Packaging Docker (optionnel)
# ─────────────────────────────────────────────────────────────
  package:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build image
        run: |
          docker build -t tripgenius:${{ github.sha }} .
          docker image save tripgenius:${{ github.sha }} | gzip > image.tar.gz
      - uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar.gz

# ─────────────────────────────────────────────────────────────
# 4️⃣  Déploiement préproduction sur Vercel (branche preprod)
# ─────────────────────────────────────────────────────────────
  deploy-preprod:
    if: github.ref == 'refs/heads/preprod'
    needs: test
    runs-on: ubuntu-latest
    environment: preproduction
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel

      - name: Pull config Vercel
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy to Vercel Preview
        run: vercel --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
