name: CI‑CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy-prod:
        description: "Déployer en production ? (yes/no)"
        required: false
        default: "no"

env:
  NODE_VERSION: "20"
  BUILD_DIR: "dist"
  REMOTE_DIR: "/var/www/tripgenius"
  LC_ALL: "C.UTF-8"

jobs:
  # ─────────────────────────────────────────────
  # 1️⃣  Build + Lint
  # ─────────────────────────────────────────────
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Build (Vite)
        run: npm run build

      - name: Upload build artefact
        uses: actions/upload-artifact@v4
        with:
          name: site-build
          path: ${{ env.BUILD_DIR }}

  # ─────────────────────────────────────────────
  # 2️⃣  Tests + Couverture (Vitest/Jest) + Codecov
  # ─────────────────────────────────────────────
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm ci

      - name: Run tests with coverage
        run: npm run test -- --coverage
        env:
          NODE_OPTIONS: "--experimental-vm-modules"

      - name: Upload coverage to Codecov
        if: ${{ secrets.CODECOV_TOKEN != '' }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/*.(json|lcov|xml)
          flags: unittests
          fail_ci_if_error: true
          slug: MustaphaAitHamou/Project-White-Box

  # ─────────────────────────────────────────────
  # 3️⃣  Lighthouse CI (optionnel, non bloquant si tu veux)
  # ─────────────────────────────────────────────
  lighthouse:
    needs: test
    runs-on: ubuntu-latest
    # mets à true si tu veux qu’un échec Lighthouse casse la CI
    continue-on-error: true
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: site-build
          path: dist

      - name: Create .lighthouserc.json
      # tu peux aussi commiter ce fichier, c’est au choix
        run: |
          cat > .lighthouserc.json <<'EOF'
          {
            "ci": {
              "collect": {
                "staticDistDir": "dist",
                "numberOfRuns": 1,
                "startServerCommand": "npx http-server dist -p 4173 -c-1",
                "url": ["http://localhost:4173/index.html"],
                "settings": {
                  "chromeFlags": "--no-sandbox --disable-dev-shm-usage"
                }
              },
              "assert": {
                "preset": "lighthouse:no-pwa",
                "assertions": {
                  "first-contentful-paint": "off",
                  "largest-contentful-paint": "off"
                }
              },
              "upload": {
                "target": "temporary-public-storage"
              }
            }
          }
          EOF

      - name: Install http-server & LHCI
        run: npm i -g http-server @lhci/cli@0.13

      - name: Run Lighthouse CI
        run: npx lhci autorun --config=.lighthouserc.json

  # ─────────────────────────────────────────────
  # 4️⃣  Docker (optionnel)
  # ─────────────────────────────────────────────
  package:
    needs: lighthouse
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build image
        run: |
          docker build -t tripgenius:${{ github.sha }} .
          docker image save tripgenius:${{ github.sha }} | gzip > image.tar.gz
      - uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar.gz

  # ─────────────────────────────────────────────
  # 5️⃣  Déploiement prod (manuel)
  # ─────────────────────────────────────────────
  deploy-prod:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy-prod == 'yes'
    needs: package
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: site-build
          path: ${{ env.BUILD_DIR }}

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.IGLAO_SSH_KEY }}

      - name: Add Iglao to known_hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.IGLAO_KNOWN_HOST }}" >> ~/.ssh/known_hosts

      - name: Rsync to server
        run: |
          rsync -avz --delete ${{ env.BUILD_DIR }}/ \
            ${{ secrets.IGLAO_USER }}@${{ secrets.IGLAO_HOST }}:${{ env.REMOTE_DIR }}

      - name: Smoke‑test production URL
        run: curl -f https://tripgenius.eu || exit 1
