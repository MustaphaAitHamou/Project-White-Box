name: CI-CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]        # ex: v0.2.1 pour ton run "sur tag"
  schedule:
    - cron: '0 6 * * 1'       # LHCI planifié chaque lundi 06:00 UTC
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  BUILD_DIR: 'dist'
  LC_ALL: 'C.UTF-8'

jobs:
  # 1) Build + lint
  build:
    if: ${{ github.event_name != 'schedule' }}   # on saute pour le cron LHCI dédié
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install deps
        run: npm ci

      # Clés factices pour éviter les crashs de build/LHCI
      - name: Create .env.local for build
        run: |
          cat > .env.local << 'EOF'
          VITE_GOOGLE_PLACE_API_KEY=fake-place-key
          VITE_GOOGLE_GEMINI_AI_API_KEY=fake-gemini-key
          VITE_GOOGLE_AUTH_CLIENT_ID=fake-client.apps.googleusercontent.com
          VITE_RECAPTCHA_SITE_KEY=fake-recaptcha
          EOF

      - name: Lint
        run: npm run lint || echo "lint warnings ignored"

      - name: Build (Vite)
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: site-build
          path: ${{ env.BUILD_DIR }}
          retention-days: 7

  # 2) Tests + couverture (Codecov seulement si secret présent)
  test:
    if: ${{ github.event_name != 'schedule' }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm ci

      - name: Run tests (Jest) + coverage
        run: npm run test -- --coverage --passWithNoTests
        env:
          NODE_OPTIONS: "--experimental-vm-modules"

      - name: Upload coverage to Codecov (skipped if no token)
        if: ${{ secrets.CODECOV_TOKEN }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          flags: unittests
          fail_ci_if_error: true

  # 3) Packaging Docker (optionnel si Dockerfile présent)
  package:
    if: ${{ github.event_name != 'schedule' && hashFiles('Dockerfile') != '' }}
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build image
        run: |
          docker build -t tripgenius:${{ github.sha }} .
          docker image save tripgenius:${{ github.sha }} | gzip > image.tar.gz
      - uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar.gz
          retention-days: 7

  # 4) Déploiement Vercel (Preview) — uniquement si secrets présents
  deploy-preprod:
    if: ${{ github.event_name != 'schedule' && startsWith(github.ref, 'refs/heads/main') && secrets.VERCEL_TOKEN && secrets.VERCEL_ORG_ID && secrets.VERCEL_PROJECT_ID }}
    needs: package
    runs-on: ubuntu-latest
    environment: preview
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Vercel (Preview)
        run: |
          npm i -g vercel
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod=false --confirm --yes
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  # 5) Lighthouse CI sur artifact (push/tag) — upload fichiers, pas besoin de token
  lighthouse:
    if: ${{ github.event_name != 'schedule' }}
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: site-build
          path: ${{ env.BUILD_DIR }}

      - name: Run Lighthouse CI
        run: npx -y @lhci/cli@latest autorun --upload.target=filesystem --collect.staticDistDir=${{ env.BUILD_DIR }} --verbose

      - name: Upload LHCI report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: .lighthouseci
          if-no-files-found: warn
          retention-days: 7

  # 6) LHCI planifié (cron) — build + audit autonome (icône "clock")
  lighthouse-scheduled:
    if: ${{ github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm ci

      - name: Create .env.local for build (cron)
        run: |
          cat > .env.local << 'EOF'
          VITE_GOOGLE_PLACE_API_KEY=fake-place-key
          VITE_GOOGLE_GEMINI_AI_API_KEY=fake-gemini-key
          VITE_GOOGLE_AUTH_CLIENT_ID=fake-client.apps.googleusercontent.com
          VITE_RECAPTCHA_SITE_KEY=fake-recaptcha
          EOF

      - name: Build (Vite)
        run: npm run build

      - name: Run Lighthouse CI (cron)
        run: npx -y @lhci/cli@latest autorun --upload.target=filesystem --collect.staticDistDir=${{ env.BUILD_DIR }}

      - name: Upload LHCI report (cron)
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report-scheduled
          path: .lighthouseci
          retention-days: 7

  # 7) Déploiement Production Vercel sur tag v*.*.* (secrets requis)
  deploy-prod:
    if: startsWith(github.ref, 'refs/tags/v') && secrets.VERCEL_TOKEN && secrets.VERCEL_ORG_ID && secrets.VERCEL_PROJECT_ID
    needs: [lighthouse]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Vercel (Production)
        run: |
          npm i -g vercel
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --confirm --yes
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
