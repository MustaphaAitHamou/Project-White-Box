/* eslint-env browser */
/* 
  Section dâ€™infos du voyage (image + badges rÃ©sumÃ©).
  Je tente dâ€™afficher une grande photo de la destination en mâ€™appuyant sur :
    1) un placeId direct (via un wrapper GetPlacePhoto)
    2) Ã  dÃ©faut, une recherche textuelle Google Places pour rÃ©cupÃ©rer une photo.
  Si je ne trouve rien de fiable ou quâ€™un chargement Ã©choue, je bascule sur un placeholder.
*/
import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import { Button } from '~/components/ui/button';
import { IoIosSend } from 'react-icons/io';
import { GetPlaceDetails } from '~/service/GlobalApi';
import { GetPlacePhoto } from '~/service/api';
import { getEnv } from '~/lib/meta-env';

/* 
  Je lis la clÃ© dâ€™API de plusieurs faÃ§ons pour Ãªtre compatible navigateur / tests.
  Je ne fais aucune hypothÃ¨se si la clÃ© manque : les appels tomberont sur le fallback.
*/
const API_KEY =
  getEnv('VITE_GOOGLE_PLACE_API_KEY') ||
  getEnv('GOOGLE_PLACE_KEY') ||
  '';

/* Image de repli si je nâ€™arrive pas Ã  charger une photo distante. */
const FALLBACK = '/placeholder.png';

/* Construction de lâ€™URL dâ€™image v1 Ã  partir du champ "name" renvoyÃ© par Places. */
const buildV1PhotoURL = (name) =>
  `https://places.googleapis.com/v1/${name}/media?maxHeightPx=1000&maxWidthPx=1400&key=${API_KEY}`;

/* Variante historique basÃ©e sur photo_reference (API Maps Photos). */
const buildLegacyPhotoURL = (ref) =>
  `https://maps.googleapis.com/maps/api/place/photo?maxwidth=1000&photoreference=${encodeURIComponent(
    ref
  )}&key=${API_KEY}`;

/* 
  Petit prÃ©chargement dâ€™image : je valide lâ€™URL en simulant un chargement.
  Si Ã§a passe, je rÃ©sous la promesse ; sinon je rejette pour tenter un fallback.
*/
function preload(url) {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.onload = () => resolve(url);
    img.onerror = reject;
    img.src = url;
  });
}

/* 
  Ã€ partir dâ€™un "photo.name" v1, je propose lâ€™URL v1 directe et une URL legacy
  en extrayant la partie aprÃ¨s "/photos/" quand câ€™est possible.
*/
function urlFromPhotoName(name) {
  if (!name) return null;
  const v1Url = buildV1PhotoURL(name);
  const parts = String(name).split('/photos/');
  const legacyRef = parts[1];
  const legacyUrl = legacyRef ? buildLegacyPhotoURL(legacyRef) : null;
  return { v1Url, legacyUrl };
}

/* no-op pour consommer un paramÃ¨tre et calmer ESLint sans altÃ©rer la logique. */
function swallow(e) { void e; }

/* 
  RÃ©solution progressive de lâ€™URL de photo :
  1) Jâ€™essaie le wrapper GetPlacePhoto(placeId), puis je prÃ©charge.
  2) Sinon, je fais une text search, je rÃ©cupÃ¨re le premier "photo.name",
     puis je tente dâ€™abord lâ€™URL v1, ensuite le fallback legacy, avec prÃ©chargement.
  3) En dernier recours, je renvoie le placeholder.
*/
async function resolvePhoto({ placeId, label }) {
  // 1) Si on a un placeId -> wrapper direct
  if (placeId) {
    try {
      const u = await GetPlacePhoto(placeId);
      if (u) {
        await preload(u);
        return u;
      }
    } catch (e) {
      swallow(e);
    }
  }

  // 2) Sinon, on tente la recherche textuelle
  if (label) {
    try {
      const { data } = await GetPlaceDetails({ textQuery: label });
      const photoName = data.places?.[0]?.photos?.[0]?.name;
      if (photoName) {
        const { v1Url, legacyUrl } = urlFromPhotoName(photoName);
        if (v1Url) {
          try {
            await preload(v1Url);
            return v1Url;
          } catch (e) {
            swallow(e);
          }
        }
        if (legacyUrl) {
          try {
            await preload(legacyUrl);
            return legacyUrl;
          } catch (e) {
            swallow(e);
          }
        }
      }
    } catch (e) {
      swallow(e);
    }
  }

  return FALLBACK;
}

export default function InfoSection({ trip, placeId, name }) {
  /* 
    Je dÃ©duis le libellÃ© Ã  afficher : soit depuis la sÃ©lection utilisateur,
    soit depuis la prop "name" fournie. Je garde une chaÃ®ne propre avec trim().
  */
  const userSel = trip?.userSelection;
  const label = (userSel?.location?.label || name || '').trim();
  const [photoUrl, setPhotoUrl] = useState(null);

  /* 
    Au montage et Ã  chaque changement de placeId/label, je rÃ©sous lâ€™URL dâ€™image.
    Je protÃ¨ge lâ€™update dâ€™Ã©tat avec un flag "mounted" en cas de dÃ©montage rapide.
  */
  useEffect(() => {
    let mounted = true;
    (async () => {
      const url = await resolvePhoto({ placeId, label });
      if (mounted) setPhotoUrl(url || FALLBACK);
    })();
    return () => {
      mounted = false;
    };
  }, [placeId, label]);

  /* Ã‰tat intermÃ©diaire si jâ€™ai un trip sans userSelection (donnÃ©e encore en cours). */
  if (trip && !userSel) {
    return (
      <div className="h-[480px] w-full bg-gray-100 flex items-center justify-center rounded">
        Chargement des infosâ€¦
      </div>
    );
  }

  /* Badges affichÃ©s sous lâ€™image si jâ€™ai un trip complet. */
  const days = userSel?.noOfDays;
  const budget = userSel?.budget;
  const traveler = userSel?.traveler;

  return (
    <div>
      {/* Image principale : jâ€™affiche un loader simple tant que photoUrl nâ€™est pas prÃªt. */}
      {photoUrl ? (
        <img
          src={photoUrl}
          alt={label || 'destination'}
          className="h-[480px] w-full object-cover rounded"
          onError={(e) => {
            e.currentTarget.src = FALLBACK;
          }}
        />
      ) : (
        <div className="h-[480px] w-full bg-gray-100 flex items-center justify-center rounded">
          Chargement de lâ€™imageâ€¦
        </div>
      )}

      {/* RÃ©sumÃ© des infos du trip : destination + badges (jours, budget, voyageurs) + bouton dâ€™action. */}
      {trip && (
        <div className="flex justify-between items-center mt-5">
          <div className="flex flex-col gap-2">
            <h2 className="font-bold text-2xl">{label}</h2>
            <div className="flex gap-5 flex-wrap">
              {days && (
                <span className="p-1 px-3 bg-gray-200 rounded-full text-gray-500 text-xs md:text-md">
                  ðŸ“† {days} jours
                </span>
              )}
              {budget && (
                <span className="p-1 px-3 bg-gray-200 rounded-full text-gray-500 text-xs md:text-md">
                  ðŸ’° Budget : {budget}
                </span>
              )}
              {traveler && (
                <span className="p-1 px-3 bg-gray-200 rounded-full text-gray-500 text-xs md:text-md">
                  ðŸ‘¥ Voyageurs : {traveler}
                </span>
              )}
            </div>
          </div>
          {/* Bouton neutre visuellement ; lâ€™action prÃ©cise pourra Ãªtre branchÃ©e plus tard. */}
          <Button>
            <IoIosSend />
          </Button>
        </div>
      )}
    </div>
  );
}

/* Je documente les props acceptÃ©es sans imposer de shape stricte pour "trip". */
InfoSection.propTypes = {
  trip: PropTypes.object,
  placeId: PropTypes.string,
  name: PropTypes.string,
};
